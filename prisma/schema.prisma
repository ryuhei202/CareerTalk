// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  jobSeeker     JobSeeker?
  employee      Employee?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

enum Gender {
  OTHER
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

enum JobSeekerStatus {
  PENDING
  APPROVED
  REJECTED
}

model JobSeeker {
  id        String          @id 
  userId    String           @unique
  user      User            @relation(fields: [userId], references: [id])
  status    JobSeekerStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
} 

model Company {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  code      String    @unique
  employees Employee[]
}


enum EmployeeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum HiringType {
  NEW_GRADUATE
  MID_CAREER
}

enum MeetingMethod {
  ONLINE
  OFFLINE
  BOTH
}

model WorkLocation {
  id        Int    @id @default(autoincrement())
  name      String @unique
  employees Employee[]
}


model Occupation {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
}

model Employee {
  id                String           @id
  userId            String           @unique
  user              User             @relation(fields: [userId], references: [id])
  birthday          DateTime?
  gender            Gender
  companyId         Int           
  company           Company          @relation(fields: [companyId], references: [id])
  occupationId      Int
  occupation        Occupation       @relation(fields: [occupationId], references: [id])
  workLocationId    Int?
  workLocation      WorkLocation?    @relation(fields: [workLocationId], references: [id])
  joiningDate       DateTime
  hiringType        HiringType?
  meetingMethod     MeetingMethod?
  selfIntroduction  String?          @default("") @db.Text
  talkableTopics    String?          @default("")
  status            EmployeeStatus   @default(PENDING)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

