// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  applicant     Applicant?
  employee      Employee?
  messages      Message[]
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

enum Gender {
  OTHER
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

enum ApplicantStatus {
  PENDING
  APPROVED
  REJECTED
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  code      String    @unique
  employees Employee[]
}


enum EmployeeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum HiringType {
  NEW_GRADUATE
  MID_CAREER
}

enum MeetingMethod {
  ONLINE
  OFFLINE
  BOTH
}

model WorkLocation {
  id        Int    @id @default(autoincrement())
  name      String @unique
  employees Employee[]
}


model Occupation {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  employees   Employee[]
  applicants  Applicant[]
}

model Employee {
  id                 String           @id
  userId             String           @unique
  user               User             @relation(fields: [userId], references: [id])
  birthday           DateTime?
  gender             Gender
  companyId          Int           
  company            Company          @relation(fields: [companyId], references: [id])
  occupationId       Int
  occupation         Occupation       @relation(fields: [occupationId], references: [id])
  workLocationId     Int?
  workLocation       WorkLocation?    @relation(fields: [workLocationId], references: [id])
  joiningDate        DateTime
  hiringType         HiringType?
  meetingMethod      MeetingMethod?
  selfIntroduction   String?          @default("") @db.Text
  talkableTopics     String?          @default("")
  status             EmployeeStatus   @default(PENDING)
  conversations      Conversation[]
  careerDescription  String?          @default("") @db.Text
  jobDescription     String?          @default("") @db.Text
  joiningDescription String?          @default("") @db.Text
  otherDescription   String?          @default("") @db.Text
  barkerMessage      String?          @default("") @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Applicant {
  id               String          @id
  userId           String          @unique
  user             User            @relation(fields: [userId], references: [id])
  conversations    Conversation[]
  birthday         DateTime?
  gender           Gender
  occupationId     Int
  occupation       Occupation      @relation(fields: [occupationId], references: [id])
  joiningDate      DateTime?
  selfIntroduction String?         @default("") @db.Text
  status           ApplicantStatus @default(PENDING)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  workHistory      String?         @default("") @db.Text
  education        String?         @default("") @db.Text
  company          String?         @default("") @db.Text
}

enum ConversationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ConversationPurposeEnum {
  INTERESTED_IN_RECRUITMENT
  INTERESTED_IN_PERSON
  INTERESTED_IN_COMPANY
  OTHER
}

model Conversation {
  id          String    @id
  applicantUserId String
  applicant   Applicant @relation(fields: [applicantUserId], references: [userId])
  employeeUserId  String
  employee    Employee  @relation(fields: [employeeUserId], references: [userId])
  purpose     ConversationPurposeEnum
  status      ConversationStatus @default(PENDING)
  messages    Message[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}


model Message {
  id             String       @id
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  content        String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}



